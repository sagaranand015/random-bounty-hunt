import os
import time
from .sampling import *
from .client import get_algorand_client_ref, get_app_client_ref


def get_randomness_from_app(user_data: str):
    """
    Calls the Algorand Smart Contract to get the randomness generated by Algorand beacon
    and returns the same to the caller
    """
    app_id = os.getenv("SAMPLING_APP_ID")
    algod_client = get_algorand_client_ref()
    app_client = get_app_client_ref(int(app_id))

    sp = algod_client.suggested_params()
    # Add 3 rounds to the first available round to give us a little
    # padding time
    # round = sp.first + 3
    round = sp.first

    # wait an extra couple rounds
    wait_round = round + 10

    sp = algod_client.suggested_params()
    current_round = sp.first

    print(f"Starting at round: {round}, current_round: {current_round}")

    sum = 0
    while current_round < wait_round:
        t1 = time.time()
        algod_client.status_after_block(current_round)
        current_round += 1
        t2 = time.time()
        diff = t2 - t1
        sum = sum + diff
        print(f"Currently at round {current_round}, {t1}, {t2}, diff: {diff}")

    print("======== Average val is: ", sum / 10)

    print("Settling...")
    sp = algod_client.suggested_params()
    sp.flat_fee = True
    sp.fee = 2000  # cover this and 1 inner transaction

    u_data = bytes(user_data, encoding='utf-8')
    res = app_client.call(
        SamplingContract.get_random,
        acct_round=round,
        u_data=u_data,
        suggested_params=sp,
        foreign_apps=[110096026],
    )
    return res.raw_value


if __name__ == "__main__":
    res = get_randomness_from_app("Some User Data!")
    print("======= RANDOMNESS RESPONSE IS: ", res)
